# Backend Dockerfile.prod - multi-stage optimized for production

# Builder stage
FROM node:18-alpine AS builder
WORKDIR /app

# Instalar dependencias de compilación
RUN apk add --no-cache python3 make g++ \
    && addgroup -S nodegroup \
    && adduser -S nodeuser -G nodegroup -u 1001

# Copiar package.json y package-lock
COPY package*.json ./

# Instalar dependencias (no dev)
RUN npm ci --only=production

# Copiar el código fuente
COPY . .

# Build step si existe (por ejemplo TypeScript)
# RUN npm run build

# Producción stage
FROM node:18-alpine AS prod
WORKDIR /app

# Crear usuario no privilegiado
RUN addgroup -S nodegroup && adduser -S nodeuser -G nodegroup -u 1001

# Copiar sólo dependencias y artefactos necesarios
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app .

# Crear directorios para uploads y logs
RUN mkdir -p /app/uploads /app/logs \
    && chown -R nodeuser:nodegroup /app/uploads /app/logs /app/node_modules /app

USER nodeuser

ENV NODE_ENV=production
EXPOSE 3000
WORKDIR /app

# Limpiar cache no necesaria (alpine ya pequeño)

CMD ["node", "server.js"]
